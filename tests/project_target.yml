---

# Notes:
# Sample project C code is not presently written to produce a release artifact.
# As such, release build options are disabled.
# This sample, therefore, only demonstrates running a collection of unit tests.

:project:
  :use_exceptions: FALSE
  :use_test_preprocessor: TRUE
  :use_auxiliary_dependencies: TRUE
  :build_root: build
  :release_build: TRUE
  :test_file_prefix: test_
  :which_ceedling: vendor/ceedling
  :default_tasks:
    - test:all

:release_build:
  :output: yaos_tests.bin
  :use_assembly: TRUE

:environment:

:extension:
  :executable: .elf

:paths:
  :test:
    - +:test/**
    - -:test/support
  :source:
    - ../kernel/**
    - ../lib/**
    - ../drivers/**
    - ../include/**
    - ../shell/**
  :support:
    - test/support
    - ../tools/SEGGER_RTT_V654c/**

:defines:
  # in order to add common defines:
  #  1) remove the trailing [] from the :common: section
  #  2) add entries to the :common: section (e.g. :test: has TEST defined)
  :commmon: &common_defines
    - CONFIG_DEBUG
    - CONFIG_REALTIME
    - CONFIG_SLEEP_LONG
    - CONFIG_SLEEP_DEEP
    - CONFIG_COMMON_IRQ_HANDLER
    - CONFIG_SYSCALL
    - CONFIG_TIMER
    - CONFIG_FLOAT
    - CONFIG_CPU_LOAD
  :test:
    - *common_defines
    - TEST
    - NDEBUG
  :test_preprocess:
    - *common_defines
    - TEST

:unity:
  :defines:
    - UNITY_INCLUDE_CONFIG_H

:cmock:
  :mock_prefix: mock_
  :when_no_prototypes: :warn
  :enforce_strict_ordering: TRUE
  :plugins:
    - :ignore
    - :callback
  :treat_as:
    uint8:    HEX8
    uint16:   HEX16
    uint32:   UINT32
    int8:     INT8
    bool:     UINT8
  :defines:
    - CMOCK_MEM_STATIC
    - CMOCK_MEM_SIZE=4096

:treat_externs: :include  # Now the extern-ed functions will be mocked.

:gcov:
    :html_report_type: detailed
    :xml_report: true

:tools:
  #:release_compiler:
  :test_compiler:
    :executable: arm-none-eabi-gcc
    :common: &common_flags
      - -march=armv7-m -mtune=cortex-m3 -mthumb
      - -fno-builtin -fstack-usage -ffunction-sections -fdata-sections -Wl,--gc-sections
    :arguments:
      - *common_flags
      - -std=gnu99
      - -Os
      - -I"$": COLLECTION_PATHS_INCLUDE
      - -I"$": COLLECTION_PATHS_TEST_TOOLCHAIN_INCLUDE
      - -I"$": COLLECTION_PATHS_TEST_SUPPORT_SOURCE_INCLUDE_VENDOR
      - -D$: COLLECTION_DEFINES_TEST_AND_VENDOR
      - -c ${1}
      - -o ${2}
  :test_linker:
    :executable: arm-none-eabi-gcc
    :arguments:
      - *common_flags
      - -specs=nosys.specs
      - -T../build/generated.ld
      - -nostartfiles
      - ${1}
      - -o ${2}
      - -L../build/ -lyaos_arch -lyaos_3rd
        #- -Wl,-wrap,malloc -Wl,-wrap,free
  :test_fixture:
# Ceedling defaults to using gcc for compiling, linking, etc.
# As [:tools] is blank, gcc will be used (so long as it's in your system path)
# See documentation to configure a given toolchain for use

# LIBRARIES
# These libraries are automatically injected into the build process. Those specified as
# common will be used in all types of builds. Otherwise, libraries can be injected in just
# tests or releases. These options are MERGED with the options in supplemental yaml files.
:libraries:
  :placement: :end
  :flag: "${1}"  # or "-L ${1}" for example
  :common: &common_libraries []
  :test:
    - *common_libraries
  :release:
    - *common_libraries

:plugins:
  :load_paths:
    - vendor/ceedling/plugins
  :enabled:
    - stdout_pretty_tests_report
    - module_generator
    - raw_output_report
    - gcov
    - xml_tests_report
...
